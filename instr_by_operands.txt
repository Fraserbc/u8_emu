Reg Rx first operand

ADD  	Rn  	Rm    			1000_nnnn_mmmm_0001
ADD  	Rn  	#imm8 			0001_nnnn_iiii_iiii
ADDC 	Rn  	Rm    			1000_nnnn_mmmm_0110
ADDC 	Rn  	#imm8 			0110_nnnn_iiii_iiii
AND  	Rn  	Rm    			1000_nnnn_mmmm_0010
AND  	Rn  	#imm8 			0010_nnnn_iiii_iiii
CMP  	Rn  	Rm    			1000_nnnn_mmmm_0111
CMP  	Rn  	#imm8 			0111_nnnn_iiii_iiii
CMPC 	Rn  	Rm    			1000_nnnn_mmmm_0101
CMPC 	Rn  	#imm8 			0101_nnnn_iiii_iiii
MOV  	Rn  	Rm    			1000_nnnn_mmmm_0000
MOV  	Rn  	#imm8 			0000_nnnn_iiii_iiii
OR   	Rn  	Rm    			1000_nnnn_mmmm_0011
OR   	Rn  	#imm8 			0011_nnnn_iiii_iiii
XOR  	Rn  	Rm    			1000_nnnn_mmmm_0100
XOR  	Rn  	#imm8 			0100_nnnn_iiii_iiii
SUB  	Rn  	Rm    			1000_nnnn_mmmm_1000
SUBC 	Rn  	Rm    			1000_nnnn_mmmm_1001
SLL  	Rn 		Rm     			1000_nnnn_mmmm_1010
SLL  	Rn 		#width 			1001_nnnn_0www_1010
SLLC 	Rn 		Rm     			1000_nnnn_mmmm_1011
SLLC 	Rn 		#width 			1001_nnnn_0www_1011
SRA  	Rn 		Rm     			1000_nnnn_mmmm_1110
SRA  	Rn 		#width 			1001_nnnn_0www_1110
SRL  	Rn 		Rm     			1000_nnnn_mmmm_1100
SRL  	Rn 		#width 			1001_nnnn_0www_1100
SRLC 	Rn 		Rm     			1000_nnnn_mmmm_1101
SRLC 	Rn 		#width 			1001_nnnn_0www_1101
L   	Rn  	[EA]        	1001_nnnn_0011_0000
L   	Rn  	[EA+]       	1001_nnnn_0101_0000
L   	Rn  	[ERm]       	1001_nnnn_mmm0_0000
L   	Rn  	Disp16[ERm] 	1001_nnnn_mmm0_1000 DDDD_DDDD_DDDD_DDDD
L   	Rn  	Disp6[BP]   	1101_nnnn_00DD_DDDD
L   	Rn  	Disp6[FP]   	1101_nnnn_01DD_DDDD
L   	Rn  	Dadr        	1001_nnnn_0001_0000 DDDD_DDDD_DDDD_DDDD
ST  	Rn  	[EA]        	1001_nnnn_0011_0001
ST  	Rn  	[EA+]       	1001_nnnn_0101_0001
ST  	Rn  	[ERm]       	1001_nnnn_mmm0_0001
ST  	Rn  	Disp16[ERm] 	1001_nnnn_mmm0_1001 DDDD_DDDD_DDDD_DDDD
ST  	Rn  	Disp6[BP]   	1101_nnnn_10DD_DDDD
ST  	Rn  	Disp6[FP]   	1101_nnnn_11DD_DDDD
ST  	Rn  	Dadr        	1001_nnnn_0001_0001 DDDD_DDDD_DDDD_DDDD
MOV  	Rn   	ECSR       		1010_nnnn_0000_0111
MOV  	Rn   	EPSW       		1010_nnnn_0000_0100
MOV  	Rn   	PSW        		1010_nnnn_0000_0011
PUSH 	Rn            			1111_nnnn_0100_1110
POP  	Rn            			1111_nnnn_0000_1110
MOV 	Rn    	CRm   			1010_nnnn_mmmm_0110
DAA 	Rn 						1000_nnnn_0001_1111
DAS 	Rn 						1000_nnnn_0011_1111
NEG 	Rn 						1000_nnnn_0101_1111
SB 		Rn.bit_offset  			1010_nnnn_0bbb_0000
RB 		Rn.bit_offset  			1010_nnnn_0bbb_0010
TB 		Rn.bit_offset  			1010_nnnn_0bbb_0001



Immediate second operand
ADD  	Rn  	#imm8 			0001_nnnn_iiii_iiii
ADD  	ERn 	#imm7 			1110_nnn0_1iii_iiii
ADDC 	Rn  	#imm8 			0110_nnnn_iiii_iiii
AND  	Rn  	#imm8 			0010_nnnn_iiii_iiii
CMP  	Rn  	#imm8 			0111_nnnn_iiii_iiii
CMPC 	Rn  	#imm8 			0101_nnnn_iiii_iiii
MOV  	Rn  	#imm8 			0000_nnnn_iiii_iiii
OR   	Rn  	#imm8 			0011_nnnn_iiii_iiii
XOR  	Rn  	#imm8 			0100_nnnn_iiii_iiii
ADD  	SP   	#signed8   		1110_0001_iiii_iiii
MOV  	PSW  	#unsigned8 		1110_1001_iiii_iiii

MOV  	ERn 	#imm7 			1110_nnn0_0iii_iiii

SWI 	#snum					1110_0101_00ii_iiii

SLL  	Rn 		#width 			1001_nnnn_0www_1010
SLLC 	Rn 		#width 			1001_nnnn_0www_1011
SRA  	Rn 		#width 			1001_nnnn_0www_1110
SRL  	Rn 		#width 			1001_nnnn_0www_1100
SRLC 	Rn 		#width 			1001_nnnn_0www_1101

SB 		Rn.bit_offset  			1010_nnnn_0bbb_0000
SB 		Dbitadr        			1010_0000_1bbb_0000 DDDD_DDDD_DDDD_DDDD
RB 		Rn.bit_offset  			1010_nnnn_0bbb_0010
RB 		Dbitadr        			1010_0000_1bbb_0010 DDDD_DDDD_DDDD_DDDD
TB 		Rn.bit_offset  			1010_nnnn_0bbb_0001
TB 		Dbitadr        			1010_0000_1bbb_0001 DDDD_DDDD_DDDD_DDDD


First bits = 1110

ADD  	ERn 	#imm7 			1110_nnn0_1iii_iiii
MOV  	ERn 	#imm7 			1110_nnn0_0iii_iiii
ADD  	SP   	#signed8   		1110_0001_iiii_iiii
MOV  	PSW  	#unsigned8 		1110_1001_iiii_iiii		# Sets PSW = unsigned 8
EI   							1110_1101_0000_1000		# Bitwise ORs the PSW to set MIE
DI   							1110_1011_1111_0111		# Bitwise ANDs the PSW to unset MIE
SC   							1110_1101_1000_0000		# Bitwise ORs the PSW to set Carry
RC   							1110_1011_0111_1111		# Bitwise ANDs the PSW to unset Carry
SWI 	#snum					1110_0101_00ii_iiii

1110_0011_iiii_iiii		Load DSR with imm8

MOV  	PSW  	#unsigned8 		1110_1001_iiii_iiii		# Sets PSW = unsigned 8
EI   							1110_1101_0000_1000		# Bitwise ORs the PSW to set MIE
DI   							1110_1011_1111_0111		# Bitwise ANDs the PSW to unset MIE
SC   							1110_1101_1000_0000		# Bitwise ORs the PSW to set Carry
RC   							1110_1011_0111_1111		# Bitwise ANDs the PSW to unset Carry
									  ^^
									These two bits control the operation somehow
									and the last 8 bits are the mask

MOV  	Rn  	#imm8 			0000_nnnn_iiii_iiii
AND  	Rn  	#imm8 			0010_nnnn_iiii_iiii
OR   	Rn  	#imm8 			0011_nnnn_iiii_iiii
XOR  	Rn  	#imm8 			0100_nnnn_iiii_iiii


ADD  	Rn  	Rm    			1000_nnnn_mmmm_0001
ADDC 	Rn  	Rm    			1000_nnnn_mmmm_0110
SUB  	Rn  	Rm    			1000_nnnn_mmmm_1000
SUBC 	Rn  	Rm    			1000_nnnn_mmmm_1001

ADD  	ERn 	ERm   			1111_nnn0_mmm0_0110

ADD  	Rn  	#imm8 			0001_nnnn_iiii_iiii
ADDC 	Rn  	#imm8 			0110_nnnn_iiii_iiii
ADD  	SP   	#signed8   		1110_0001_iiii_iiii
ADD  	ERn 	#imm7 			1110_nnn0_1iii_iiii




# Instructions starting with 1000, probably ALU instructions
MOV  	Rn  	Rm    			1000_nnnn_mmmm_0000
ADD  	Rn  	Rm    			1000_nnnn_mmmm_0001
AND  	Rn  	Rm    			1000_nnnn_mmmm_0010
OR   	Rn  	Rm    			1000_nnnn_mmmm_0011
XOR  	Rn  	Rm    			1000_nnnn_mmmm_0100
CMPC 	Rn  	Rm    			1000_nnnn_mmmm_0101
ADDC 	Rn  	Rm    			1000_nnnn_mmmm_0110
CMP  	Rn  	Rm    			1000_nnnn_mmmm_0111
SUB  	Rn  	Rm    			1000_nnnn_mmmm_1000
SUBC 	Rn  	Rm    			1000_nnnn_mmmm_1001
SLL  	Rn 		Rm     			1000_nnnn_mmmm_1010
SLLC 	Rn 		Rm     			1000_nnnn_mmmm_1011
SRL  	Rn 		Rm     			1000_nnnn_mmmm_1100
SRLC 	Rn 		Rm     			1000_nnnn_mmmm_1101
SRA  	Rn 		Rm     			1000_nnnn_mmmm_1110

DAA 	Rn 						1000_nnnn_0001_1111
DAS 	Rn 						1000_nnnn_0011_1111
NEG 	Rn 						1000_nnnn_0101_1111

EXTBW 	ERn						1000_nnn1_nnn0_1111		# This looks like two Rx registers


# Instructions starting with 1001
SLL  	Rn 		#width 			1001_nnnn_0www_1010
SLLC 	Rn 		#width 			1001_nnnn_0www_1011
SRA  	Rn 		#width 			1001_nnnn_0www_1110
SRL  	Rn 		#width 			1001_nnnn_0www_1100
SRLC 	Rn 		#width 			1001_nnnn_0www_1101

L   	ERn 	[EA]        	1001_nnn0_0011_0010
L   	ERn 	[EA+]       	1001_nnn0_0101_0010
L   	ERn 	[ERm]       	1001_nnn0_mmm0_0010
L   	ERn 	Dadr        	1001_nnn0_0001_0010 DDDD_DDDD_DDDD_DDDD
L   	Rn  	[EA]        	1001_nnnn_0011_0000
L   	Rn  	[EA+]       	1001_nnnn_0101_0000
L   	Rn  	[ERm]       	1001_nnnn_mmm0_0000
L   	Rn  	Disp16[ERm] 	1001_nnnn_mmm0_1000 DDDD_DDDD_DDDD_DDDD
L   	Rn  	Dadr        	1001_nnnn_0001_0000 DDDD_DDDD_DDDD_DDDD
L   	XRn 	[EA]        	1001_nn00_0011_0100
L   	XRn 	[EA+]       	1001_nn00_0101_0100
L   	QRn 	[EA]        	1001_n000_0011_0110
L   	QRn 	[EA+]       	1001_n000_0101_0110
ST  	ERn 	[EA]        	1001_nnn0_0011_0011
ST  	ERn 	[EA+]       	1001_nnn0_0101_0011
ST  	ERn 	[ERm]       	1001_nnn0_mmm0_0011
ST  	ERn 	Dadr        	1001_nnn0_0001_0011 DDDD_DDDD_DDDD_DDDD
ST  	Rn  	[EA]        	1001_nnnn_0011_0001
ST  	Rn  	[EA+]       	1001_nnnn_0101_0001
ST  	Rn  	[ERm]       	1001_nnnn_mmm0_0001
ST  	Rn  	Disp16[ERm] 	1001_nnnn_mmm0_1001 DDDD_DDDD_DDDD_DDDD
ST  	Rn  	Dadr        	1001_nnnn_0001_0001 DDDD_DDDD_DDDD_DDDD
ST  	XRn 	[EA]        	1001_nn00_0011_0101
ST  	XRn 	[EA+]       	1001_nn00_0101_0101
ST  	QRn 	[EA]        	1001_n000_0011_0111
ST  	QRn 	[EA+]       	1001_n000_0101_0111



# Load/Store sorted by memory access then by L/S and size
L   	Rn  	[EA]        	1001_nnnn_0011_0000
ST  	Rn  	[EA]        	1001_nnnn_0011_0001
L   	ERn 	[EA]        	1001_nnn0_0011_0010
ST  	ERn 	[EA]        	1001_nnn0_0011_0011
L   	XRn 	[EA]        	1001_nn00_0011_0100
ST  	XRn 	[EA]        	1001_nn00_0011_0101
L   	QRn 	[EA]        	1001_n000_0011_0110
ST  	QRn 	[EA]        	1001_n000_0011_0111

L   	Rn  	[EA+]       	1001_nnnn_0101_0000
ST  	Rn  	[EA+]       	1001_nnnn_0101_0001
L   	ERn 	[EA+]       	1001_nnn0_0101_0010
ST  	ERn 	[EA+]       	1001_nnn0_0101_0011
L   	XRn 	[EA+]       	1001_nn00_0101_0100
ST  	XRn 	[EA+]       	1001_nn00_0101_0101
L   	QRn 	[EA+]       	1001_n000_0101_0110
ST  	QRn 	[EA+]       	1001_n000_0101_0111

L   	Rn  	[ERm]       	1001_nnnn_mmm0_0000
ST  	Rn  	[ERm]       	1001_nnnn_mmm0_0001
L   	ERn 	[ERm]       	1001_nnn0_mmm0_0010
ST  	ERn 	[ERm]       	1001_nnn0_mmm0_0011

L   	Rn  	Disp16[ERm] 	1001_nnnn_mmm0_1000 DDDD_DDDD_DDDD_DDDD
ST  	Rn  	Disp16[ERm] 	1001_nnnn_mmm0_1001 DDDD_DDDD_DDDD_DDDD
L   	ERn 	Disp16[ERm] 	1010_nnn0_mmm0_1000 DDDD_DDDD_DDDD_DDDD
ST  	ERn 	Disp16[ERm] 	1010_nnn0_mmm0_1001 DDDD_DDDD_DDDD_DDDD

L   	Rn  	Disp6[BP]   	1101_nnnn_00DD_DDDD
ST  	Rn  	Disp6[BP]   	1101_nnnn_10DD_DDDD
L   	ERn 	Disp6[BP]   	1011_nnn0_00DD_DDDD
ST  	ERn 	Disp6[BP]   	1011_nnn0_10DD_DDDD

L   	Rn  	Disp6[FP]   	1101_nnnn_01DD_DDDD
ST  	Rn  	Disp6[FP]   	1101_nnnn_11DD_DDDD
L   	ERn 	Disp6[FP]   	1011_nnn0_01DD_DDDD
ST  	ERn 	Disp6[FP]   	1011_nnn0_11DD_DDDD

L   	Rn  	Dadr        	1001_nnnn_0001_0000 DDDD_DDDD_DDDD_DDDD
ST  	Rn  	Dadr        	1001_nnnn_0001_0001 DDDD_DDDD_DDDD_DDDD
L   	ERn 	Dadr        	1001_nnn0_0001_0010 DDDD_DDDD_DDDD_DDDD
ST  	ERn 	Dadr        	1001_nnn0_0001_0011 DDDD_DDDD_DDDD_DDDD


# Control Register Access instructions sorted by last 4 bits

MOV  	Rn   	PSW        		1010_nnnn_0000_0011
MOV  	Rn   	EPSW       		1010_nnnn_0000_0100
MOV  	ERn  	ELR        		1010_nnn0_0000_0101
MOV  	Rn   	ECSR       		1010_nnnn_0000_0111
MOV  	EPSW 	Rm         		1010_0000_mmmm_1100
MOV  	ELR  	ERm        		1010_mmm0_0000_1101
MOV  	ERn  	SP         		1010_nnn0_0001_1010
MOV  	PSW  	Rm         		1010_0000_mmmm_1011
MOV  	ECSR 	Rm         		1010_0000_mmmm_1111

# This one doesn't nicely fit
MOV  	SP   	ERm        		1010_0001_mmm0_1010

# These are different somehow?
ADD  	SP   	#signed8   		1110_0001_iiii_iiii
MOV  	PSW  	#unsigned8 		1110_1001_iiii_iiii


# DSR Prefix Instructions
1001_0000_dddd_1111		Use Rd as DSR
1111_1110_1001_1111		Use current DSR
1110_0011_iiii_iiii		Load DSR with imm8




# Instructions starting with 1111
B  		Cadr   					1111_gggg_0000_0000 CCCC_CCCC_CCCC_CCCC
B  		ERn    					1111_0000_nnn0_0010
BL 		Cadr   					1111_gggg_0000_0001 CCCC_CCCC_CCCC_CCCC
BL 		ERn    					1111_0000_nnn0_0011

MOV  	ERn 	ERm   			1111_nnn0_mmm0_0101
ADD  	ERn 	ERm   			1111_nnn0_mmm0_0110
CMP  	ERn 	ERm   			1111_nnn0_mmm0_0111

PUSH 	Rn            			1111_nnnn_0100_1110
PUSH 	ERn           			1111_nnn0_0101_1110
PUSH 	XRn           			1111_nn00_0110_1110
PUSH 	QRn           			1111_n000_0111_1110

PUSH 	register_list 			1111_lepa_1100_1110

POP  	Rn            			1111_nnnn_0000_1110
POP  	ERn           			1111_nnn0_0001_1110
POP  	XRn           			1111_nn00_0010_1110
POP  	QRn           			1111_n000_0011_1110

POP  	register_list 			1111_lepa_1000_1110

MOV 	CRn   	[EA]  			1111_nnnn_0000_1101
MOV 	CRn   	[EA+] 			1111_nnnn_0001_1101
MOV 	CERn  	[EA]  			1111_nnn0_0010_1101
MOV 	CERn  	[EA+] 			1111_nnn0_0011_1101

MOV 	CXRn  	[EA]  			1111_nn00_0100_1101
MOV 	CXRn  	[EA+] 			1111_nn00_0101_1101
MOV 	CQRn  	[EA]  			1111_n000_0110_1101
MOV 	CQRn  	[EA+] 			1111_n000_0111_1101


MOV 	[EA]  	CRm   			1111_mmmm_1000_1101
MOV 	[EA+] 	CRm   			1111_mmmm_1001_1101
MOV 	[EA]  	CERm  			1111_mmm0_1010_1101
MOV 	[EA+] 	CERm  			1111_mmm0_1011_1101

MOV 	[EA]  	CXRm  			1111_mm00_1100_1101
MOV 	[EA+] 	CXRm  			1111_mm00_1101_1101
MOV 	[EA]  	CQRm  			1111_m000_1110_1101
MOV 	[EA+] 	CQRm  			1111_m000_1111_1101

LEA 	[ERm]       			1111_0000_mmm0_1010
LEA 	Disp16[ERm] 			1111_0000_mmm0_1011 DDDD_DDDD_DDDD_DDDD
LEA 	Dadr        			1111_0000_0000_1100 DDDD_DDDD_DDDD_DDDD

MUL 	ERn 	Rm 				1111_nnn0_mmmm_0100
DIV 	ERn 	Rm 				1111_nnn0_mmmm_1001

RTI      						1111_1110_0000_1111
RT       						1111_1110_0001_1111
INC 	[EA] 					1111_1110_0010_1111
DEC 	[EA] 					1111_1110_0011_1111
NOP      						1111_1110_1000_1111
Use current DSR					1111_1110_1001_1111
CPLC 							1111_1110_1100_1111
BRK       						1111_1111_1111_1111